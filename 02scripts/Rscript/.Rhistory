colnames(SVMData) <- c("evaluate","value","projectname","method")
colnames(DTData) <- c("evaluate","value","projectname","method")
allData <- rbind(MultiData,LogisticData,LogisticAll,RMData,KNNData,SVMData,DTData)
fun_mean <- function(x){
return(data.frame(y=mean(x),label=round(mean(x,na.rm=T),3)))
}
p<- ggplot(allData,aes(factor(method),value),na.rm = TRUE) + geom_boxplot(na.rm = TRUE) + stat_summary(fun.y=mean, geom="point", shape=20, size=1, color="red", fill="red") + stat_summary(fun.data = fun_mean, geom="text",color="red",size=2, vjust=-0.7)
p + facet_grid(projectname ~ evaluate) #以vs和am为分类变量
#previous_theme <- theme_set(theme_bw())
library(ggplot2)
library("effsize")
library(reshape2)
project <- "AEEEM.mat"
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
colnames(MultiData) <- c("Accuracy","Precision","Recall","F1","AUC")
logisticpath <- file.path("..", "..","03results",paste("Logistic_",project,".csv",sep=""), fsep=.Platform$file.sep)
LogisticData <- read.csv(logisticpath,header=F)
colnames(LogisticData) <- c("Accuracy","Precision","Recall","F1","AUC")
logisticallpath <- file.path("..", "..","03results",paste("Logistic_",project,"_alldatafortrain.csv",sep=""), fsep=.Platform$file.sep)
LogisticAll <- read.csv(logisticallpath,header=F)
colnames(LogisticAll) <- c("Accuracy","Precision","Recall","F1","AUC")
randomforestpath <- file.path("..", "..","03results",paste("RandomForest_",project,".csv",sep=""), fsep=.Platform$file.sep)
RMData <- read.csv(randomforestpath,header = F)
colnames(RMData) <- c("Accuracy","Precision","Recall","F1","AUC")
knnpath <- file.path("..", "..","03results",paste("KNN_",project,".csv",sep=""), fsep=.Platform$file.sep)
KNNData <- read.csv(knnpath,header = F)
colnames(KNNData) <- c("Accuracy","Precision","Recall","F1","AUC")
svmpath <- file.path("..", "..","03results",paste("SVM_",project,".csv",sep=""), fsep=.Platform$file.sep)
SVMData <- read.csv(svmpath,header = F)
colnames(SVMData) <- c("Accuracy","Precision","Recall","F1","AUC")
dicisiontreepath <- file.path("..", "..","03results",paste("DecisionTree_",project,".csv",sep=""), fsep=.Platform$file.sep)
DTData <- read.csv(dicisiontreepath,header = F)
colnames(DTData) <- c("Accuracy","Precision","Recall","F1","AUC")
library(ggplot2)
library("effsize")
library(reshape2)
project <- "AEEEM.mat"
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
colnames(MultiData) <- c("Accuracy","Precision","Recall","F1","AUC")
logisticpath <- file.path("..", "..","03results",paste("Logistic_",project,".csv",sep=""), fsep=.Platform$file.sep)
LogisticData <- read.csv(logisticpath,header=F)
colnames(LogisticData) <- c("Accuracy","Precision","Recall","F1","AUC")
logisticallpath <- file.path("..", "..","03results",paste("Logistic_",project,"_alldatafortrain.csv",sep=""), fsep=.Platform$file.sep)
LogisticAll <- read.csv(logisticallpath,header=F)
colnames(LogisticAll) <- c("Accuracy","Precision","Recall","F1","AUC")
randomforestpath <- file.path("..", "..","03results",paste("RandomForest_",project,".csv",sep=""), fsep=.Platform$file.sep)
RMData <- read.csv(randomforestpath,header = F)
colnames(RMData) <- c("Accuracy","Precision","Recall","F1","AUC")
knnpath <- file.path("..", "..","03results",paste("KNN_",project,".csv",sep=""), fsep=.Platform$file.sep)
KNNData <- read.csv(knnpath,header = F)
colnames(KNNData) <- c("Accuracy","Precision","Recall","F1","AUC")
svmpath <- file.path("..", "..","03results",paste("SVM_",project,".csv",sep=""), fsep=.Platform$file.sep)
SVMData <- read.csv(svmpath,header = F)
colnames(SVMData) <- c("Accuracy","Precision","Recall","F1","AUC")
dicisiontreepath <- file.path("..", "..","03results",paste("DecisionTree_",project,".csv",sep=""), fsep=.Platform$file.sep)
DTData <- read.csv(dicisiontreepath,header = F)
colnames(DTData) <- c("Accuracy","Precision","Recall","F1","AUC")
pronum <- 100
dataLen <- nrow(MultiData)
projectNum <- dataLen/pronum
evaluateNum <- 5
projectName <- NULL
proName <- c("EQ","JDT","LC","ML","PDE")
for( i in seq(evaluateNum)){
for(j in seq(projectNum)){
projectName <- cbind(projectName,t(rep(proName[j],pronum)))
}
}
projectName <- t(projectName)
MultiData    <- melt(MultiData)
LogisticData <- melt(LogisticData)
LogisticAll  <- melt(LogisticAll)
RMData       <- melt(RMData)
KNNData      <- melt(KNNData)
SVMData      <- melt(SVMData)
DTData       <- melt(DTData)
MultiData    <- cbind(MultiData,projectName,rep("XXX",evaluateNum*dataLen))
LogisticData <- cbind(LogisticData,projectName,rep("SPL",evaluateNum*dataLen))
LogisticAll  <- cbind(LogisticAll,projectName,rep("SCL",evaluateNum*dataLen))
RMData       <- cbind(RMData,projectName,rep("RM",evaluateNum*dataLen))
KNNData      <- cbind(KNNData,projectName,rep("KNN",evaluateNum*dataLen))
SVMData      <- cbind(SVMData,projectName,rep("SVM",evaluateNum*dataLen))
DTData       <- cbind(DTData,projectName,rep("DT",evaluateNum*dataLen))
colnames(MultiData) <- c("evaluate","value","projectname","method")
colnames(LogisticData) <- c("evaluate","value","projectname","method")
colnames(LogisticAll) <- c("evaluate","value","projectname","method")
colnames(RMData) <- c("evaluate","value","projectname","method")
colnames(KNNData) <- c("evaluate","value","projectname","method")
colnames(SVMData) <- c("evaluate","value","projectname","method")
colnames(DTData) <- c("evaluate","value","projectname","method")
allData <- rbind(MultiData,LogisticData,LogisticAll,RMData,KNNData,SVMData,DTData)
fun_mean <- function(x){
return(data.frame(y=mean(x),label=round(mean(x,na.rm=T),3)))
}
p<- ggplot(allData,aes(factor(method),value),na.rm = TRUE) + geom_boxplot(na.rm = TRUE) + stat_summary(fun.y=mean, geom="point", shape=20, size=1, color="red", fill="red") + stat_summary(fun.data = fun_mean, geom="text",color="red",size=2, vjust=-0.7)
p + facet_grid(projectname ~ evaluate) #以vs和am为分类变量
#previous_theme <- theme_set(theme_bw())
previous_theme <- theme_set(theme_bw())
library(ggplot2)
library("effsize")
library(reshape2)
project <- "AEEEM.mat"
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
colnames(MultiData) <- c("Accuracy","Precision","Recall","F1","AUC")
logisticpath <- file.path("..", "..","03results",paste("Logistic_",project,".csv",sep=""), fsep=.Platform$file.sep)
LogisticData <- read.csv(logisticpath,header=F)
colnames(LogisticData) <- c("Accuracy","Precision","Recall","F1","AUC")
logisticallpath <- file.path("..", "..","03results",paste("Logistic_",project,"_alldatafortrain.csv",sep=""), fsep=.Platform$file.sep)
LogisticAll <- read.csv(logisticallpath,header=F)
colnames(LogisticAll) <- c("Accuracy","Precision","Recall","F1","AUC")
randomforestpath <- file.path("..", "..","03results",paste("RandomForest_",project,".csv",sep=""), fsep=.Platform$file.sep)
RMData <- read.csv(randomforestpath,header = F)
colnames(RMData) <- c("Accuracy","Precision","Recall","F1","AUC")
knnpath <- file.path("..", "..","03results",paste("KNN_",project,".csv",sep=""), fsep=.Platform$file.sep)
KNNData <- read.csv(knnpath,header = F)
colnames(KNNData) <- c("Accuracy","Precision","Recall","F1","AUC")
svmpath <- file.path("..", "..","03results",paste("SVM_",project,".csv",sep=""), fsep=.Platform$file.sep)
SVMData <- read.csv(svmpath,header = F)
colnames(SVMData) <- c("Accuracy","Precision","Recall","F1","AUC")
dicisiontreepath <- file.path("..", "..","03results",paste("DecisionTree_",project,".csv",sep=""), fsep=.Platform$file.sep)
DTData <- read.csv(dicisiontreepath,header = F)
colnames(DTData) <- c("Accuracy","Precision","Recall","F1","AUC")
pronum <- 100
dataLen <- nrow(MultiData)
projectNum <- dataLen/pronum
evaluateNum <- 5
projectName <- NULL
proName <- c("EQ","JDT","LC","ML","PDE")
for( i in seq(evaluateNum)){
for(j in seq(projectNum)){
projectName <- cbind(projectName,t(rep(proName[j],pronum)))
}
}
projectName <- t(projectName)
MultiData    <- melt(MultiData)
LogisticData <- melt(LogisticData)
LogisticAll  <- melt(LogisticAll)
RMData       <- melt(RMData)
KNNData      <- melt(KNNData)
SVMData      <- melt(SVMData)
DTData       <- melt(DTData)
MultiData    <- cbind(MultiData,projectName,rep("XXX",evaluateNum*dataLen))
LogisticData <- cbind(LogisticData,projectName,rep("SPL",evaluateNum*dataLen))
LogisticAll  <- cbind(LogisticAll,projectName,rep("SCL",evaluateNum*dataLen))
RMData       <- cbind(RMData,projectName,rep("RM",evaluateNum*dataLen))
KNNData      <- cbind(KNNData,projectName,rep("KNN",evaluateNum*dataLen))
SVMData      <- cbind(SVMData,projectName,rep("SVM",evaluateNum*dataLen))
DTData       <- cbind(DTData,projectName,rep("DT",evaluateNum*dataLen))
colnames(MultiData) <- c("evaluate","value","projectname","method")
colnames(LogisticData) <- c("evaluate","value","projectname","method")
colnames(LogisticAll) <- c("evaluate","value","projectname","method")
colnames(RMData) <- c("evaluate","value","projectname","method")
colnames(KNNData) <- c("evaluate","value","projectname","method")
colnames(SVMData) <- c("evaluate","value","projectname","method")
colnames(DTData) <- c("evaluate","value","projectname","method")
allData <- rbind(MultiData,LogisticData,LogisticAll,RMData,KNNData,SVMData,DTData)
fun_mean <- function(x){
return(data.frame(y=mean(x),label=round(mean(x,na.rm=T),3)))
}
p<- ggplot(allData,aes(factor(method),value),na.rm = TRUE) + geom_boxplot(na.rm = TRUE) + stat_summary(fun.y=mean, geom="point", shape=20, size=1, color="red", fill="red") + stat_summary(fun.data = fun_mean, geom="text",color="red",size=2, vjust=-0.7)
p + facet_grid(projectname ~ evaluate) #以vs和am为分类变量
#previous_theme <- theme_set(theme_bw())
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
i= 1
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
View(unsupervisedData)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
View(Fmeasure)
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
View(result)
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-10%un.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-20%un.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-50%un.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-50%un.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
i = 1
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-50%un.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
print(k)
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-50%un.csv")
View(AUCdata)
View(Fmeasure)
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
print(k)
if(is.na(Fmeasure[k:(k+adds),2])){
tmp1 <- NaN
tmp2 <- NaN
}else{
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
}
if(is.na(AUCdata[k:(k+adds),2])){
tmp3 <- NaN
tmp4 <- NaN
}else{
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
}
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-50%un.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
logisticpath <- file.path("..", "..","03results",paste("Logistic_",project,".csv",sep=""), fsep=.Platform$file.sep)
LogisticData <- read.csv(logisticpath,header=F)
logisticallpath <- file.path("..", "..","03results",paste("Logistic_",project,"_alldatafortrain.csv",sep=""), fsep=.Platform$file.sep)
LogisticAll <- read.csv(logisticallpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],LogisticData[,4],LogisticAll[,4])
AUCdata <- cbind(MultiData[,5],LogisticData[,5],LogisticAll[,5])
datalen <- nrow(Fmeasure)
modelnum <- 3
result <- NULL
for(k in seq(1,datalen,by = steps)){
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
tmp5 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),3],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp6 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),3],conf.level = 0.95)[1]$estimate
tmp7 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),3],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp8 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),3],conf.level = 0.95)[1]$estimate
tmp <- cbind(tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,tmp7,tmp8)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-new.csv")
library("effsize")
projects = c("AEEEM.mat","MORPH.mat","Relink.mat","softlab.mat")
projectsdata <- NULL
steps <- 100
adds <- 99
for (i in seq(length(projects))) {
project = projects[i]
multitaskpath <- file.path("..", "..","03results",paste("MultiTask_",project,".csv",sep=""), fsep=.Platform$file.sep)
MultiData <- read.csv(multitaskpath,header=F)
unsupervisedpath <- file.path("..", "..","03results",paste("Unsupervised_",project,".csv",sep=""), fsep=.Platform$file.sep)
unsupervisedData <- read.csv(unsupervisedpath,header=F)
Fmeasure <- NULL
AUCdata  <- NULL
Fmeasure <- cbind(MultiData[,4],unsupervisedData[,4])
AUCdata <- cbind(MultiData[,5],unsupervisedData[,5])
datalen <- nrow(Fmeasure)
modelnum <- 2
result <- NULL
for(k in seq(1,datalen,by = steps)){
if(is.na(Fmeasure[k:(k+adds),2])){
tmp1 <- NaN
tmp2 <- NaN
}else{
tmp1 <- wilcox.test(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp2 <- cliff.delta(Fmeasure[k:(k+adds),1],Fmeasure[k:(k+adds),2],conf.level = 0.95)[1]$estimate
}
if(is.na(AUCdata[k:(k+adds),2])){
tmp3 <- NaN
tmp4 <- NaN
}else{
tmp3 <- wilcox.test(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],exact=FALSE,conf.level = 0.95)[3]$p.value
tmp4 <- cliff.delta(AUCdata[k:(k+adds),1],AUCdata[k:(k+adds),2],conf.level = 0.95)[1]$estimate
}
tmp <- cbind(tmp1,tmp2,tmp3,tmp4)
result <- rbind(result,tmp)
}
projectsdata <- rbind(projectsdata,result)
}
write.csv(projectsdata,"pvalue-delta-10folds-new.csv")
